<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName">

	<!-- 加载jdbc属性文件 (配置数据库连接的信息) -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${driverClass}" />
		<property name="jdbcUrl" value="${jdbcUrl}" />
		<property name="user" value="${user}" />
		<property name="password" value="${password}" />
	</bean>
	<!-- spring框架用于整合Hibernate的工厂bean -->
	<!-- <context:component-scan base-package="com.hhy.bos.domain" /> -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 注入Hibernate相关的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 注入Hibernate的映射文件 -->
		<property name="mappingLocations" value="classpath:com/hhy/bos/domain/*.hbm.xml"></property>

		<!-- <property name="mappingDirectoryLocations"> 数组按照list进行注入 <list> <value>classpath:com/hhy/bos/domain</value> 
			<value>com/hhy/bos/domain/Decidedzone.hbm.xml</value> <value>com/hhy/bos/domain/Region.hbm.xml</value> 
			<value>com/hhy/bos/domain/Staff.hbm.xml</value> <value>com/hhy/bos/domain/Subarea.hbm.xml</value> 
			<value>com/hhy/bos/domain/User.hbm.xml</value> </list> </property> -->
	</bean>

	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 组件扫描 -->
	<context:component-scan base-package="com.hhy.bos" />
	<!-- 引入注解解析器 （框架已经写好） -->
	<context:annotation-config />
	<!-- 事务注解 -->
	<tx:annotation-driven />

	<!-- 配置远程服务代理对象 -->
	<bean id="customerService"
		class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
		<!-- 注入接口类型 -->
		<property name="serviceInterface" value="com.hhy.bos.crm.CustomerService" />
		<!-- 服务访问路径 -->
		<property name="serviceUrl" value="http://localhost:8080/crm/remoting/customer" />
	</bean>

	<!-- 配置一个工厂Bean ,用于创建shiro框架用到的过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!--注入安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 注入当前系统的登录页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 注入成功页面 -->
		<property name="successUrl" value="/index.jsp" />
		<!-- 注入权限不足提示页面 -->
		<property name="unauthorizedUrl" value="/unauthorizedUrl.jsp" />
		<!-- 注入URL拦截规则，如果匹配成功，则经过相应的过滤器进行处理 -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/images/** = anon
				/js/** = anon
				/login.jsp* = anon
				/validatecode.jsp* = anon
				/userAction_login.action = anon
				/page_base_staff.action = perms["staff"]
				/* = authc
			</value>
		</property>
	</bean>

	<!-- 注册自定义的Realm -->
	<bean id="bosRealm" class="com.hhy.bos.shiro.BOSRealm"></bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 注入上面的realm -->
		<property name="realm" ref="bosRealm" />
		<!-- 注入缓存管理器 -->
		<!-- <property name="cacheManager" ref="cacheManager"/> -->
	</bean>

	<!-- 注册缓存管理器 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		注入ehcache配置文件 <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
		</bean> -->

	<!-- 开启shiro注解 -->
	<!-- 自动代理 -->
	<bean id="defaultAdvisorAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!-- 强制使用cglib创建Action的代理对象 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>

	<!-- 切面类 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"></bean>

	<!-- spring负责创建流程引擎的配置文件 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置事务管理器，统一事务 -->
		<property name="transactionManager" ref="transactionManager" />
		<!-- 设置建表策略，如果没有表，自动创建表 -->
		<property name="databaseSchemaUpdate" value="true" />
	</bean>
	<!-- 创建流程引擎对象 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	
	<!-- 
	相当于下面的代码
	RepositoryServicie repositoryService = processEngine.getRepositoryService();
	RuntimeServicie repositoryService = processEngine.getRuntimeServicie();
	TaskServicie taskServicie = processEngine.getTaskServicie();
	HistoryServicie historyServicie = processEngine.getHistoryServicie();
	 -->
	<!-- 由流程引擎对象，提供的方法，创建项目中使用的Activiti工作流的Service -->
	<!-- <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="formService" factory-bean="processEngine" factory-method="getFormService" />  -->
</beans>
